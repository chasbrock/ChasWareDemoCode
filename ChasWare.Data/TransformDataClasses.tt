<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".log" #>
<#@ assembly Name="System.Core.dll" #>
<#@ assembly name="$(TargetDir)ChasWare.Common.dll" #>
<#@ assembly name="$(TargetDir)ChasWare.Data.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="ChasWare.Data" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>


<# 
	string assemblyName = "ChasWare.Data";
	string rootPath = GetTarget(@"\Classes", Host);
	ChasWare.Common.Utils.Transformation.Transformer transformer = new ChasWare.Common.Utils.Transformation.Transformer(assemblyName, rootPath);
	
    string extension =  ".ts";
	string fileName;

	foreach (Type t in transformer.ExportedTypes)
    {
       string content = transformer.CreateTS(t);
	   if(string.IsNullOrWhiteSpace(content)) 
	   {
	      continue;
	   }
	   fileName = transformer.PrintToFile(t, content,  "TS", extension);
	   WriteLine($"{DateTime.Now} Creating TypeScript (TS) data file {t.Name} => {fileName}");
    }

    extension =  ".dto.cs";
	foreach (Type t in transformer.ExportedTypes)
    {
	   string content = transformer.CreateDTO(t);
	   if(string.IsNullOrWhiteSpace(content)) 
	   {
	      continue;
	   }
  	   fileName = transformer.PrintToFile(t, content, "DTO", extension);
	   WriteLine($"{DateTime.Now} Creating Data Transfer Object (DTO) file {t.Name} => {fileName}");
   }

    extension =  ".tx.cs";
	foreach (Type t in transformer.ExportedTypes)
    {
	   string content = transformer.CreateTX(t);
	   if(string.IsNullOrWhiteSpace(content)) 
	   {
	      continue;
	   }
  	   fileName = transformer.PrintToFile(t, content, "TX", extension);
	   WriteLine($"{DateTime.Now} Creating Translator (TX) file {t.Name} => {fileName}");
   }

   WriteLine(transformer.Log.ToString());
 #>

<#+
	string GetTarget(string relativeOutputFilePath, Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost host)
    {
        string outputPath = System.IO.Path.GetDirectoryName(host.TemplateFile);
        return System.IO.Path.Combine(outputPath + relativeOutputFilePath);
    }

#>